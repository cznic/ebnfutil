Lexical ["add_op" "assign_op" "big_u_value" "binary_op" "byte_value" "decimal_digit" "decimal_lit" "decimals" "escaped_char" "exponent" "float_lit" "hex_byte_value" "hex_digit" "hex_lit" "identifier" "imaginary_lit" "int_lit" "interpreted_string_lit" "letter" "little_u_value" "mul_op" "newline" "octal_byte_value" "octal_digit" "octal_lit" "raw_string_lit" "rel_op" "rune_lit" "string_lit" "unary_op" "unicode_char" "unicode_digit" "unicode_letter" "unicode_value"]
Literals ["!" "!=" "%" "&" "&&" "&^" "'" "(" ")" "*" "+" "++" "," "-" "--" "." "..." "/" "0" ":" ":=" ";" "<" "<-" "<<" "<=" "=" "==" ">" ">=" ">>" "E" "U" "X" "[" "\"" "\\" "]" "^" "_" "`" "a" "b" "break" "case" "chan" "const" "continue" "default" "defer" "e" "else" "f" "fallthrough" "for" "func" "go" "goto" "i" "if" "import" "interface" "map" "n" "package" "r" "range" "return" "select" "struct" "switch" "t" "type" "u" "v" "var" "x" "{" "|" "||" "}"]
NonTerminals ["AnonymousField" "ArgumentList" "ArrayLength" "ArrayType" "Assignment" "BaseType" "BaseTypeName" "BasicLit" "Block" "BreakStmt" "BuiltinArgs" "BuiltinCall" "Call" "Channel" "ChannelType" "CommCase" "CommClause" "CompositeLit" "Condition" "ConstDecl" "ConstSpec" "ContinueStmt" "Conversion" "Declaration" "DeferStmt" "Element" "ElementIndex" "ElementList" "ElementType" "EmptyStmt" "ExprCaseClause" "ExprSwitchCase" "ExprSwitchStmt" "Expression" "ExpressionList" "ExpressionStmt" "FallthroughStmt" "FieldDecl" "FieldName" "ForClause" "ForStmt" "Function" "FunctionBody" "FunctionDecl" "FunctionLit" "FunctionName" "FunctionType" "GoStmt" "GotoStmt" "IdentifierList" "IfStmt" "ImportDecl" "ImportPath" "ImportSpec" "IncDecStmt" "Index" "InitStmt" "InterfaceType" "InterfaceTypeName" "Key" "KeyType" "Label" "LabeledStmt" "Literal" "LiteralType" "LiteralValue" "MapType" "MethodDecl" "MethodExpr" "MethodName" "MethodSpec" "Operand" "OperandName" "PackageClause" "PackageName" "ParameterDecl" "ParameterList" "Parameters" "PointerType" "PostStmt" "PrimaryExpr" "QualifiedIdent" "RangeClause" "Receiver" "ReceiverType" "RecvExpr" "RecvStmt" "Result" "ReturnStmt" "SelectStmt" "Selector" "SendStmt" "ShortVarDecl" "Signature" "SimpleStmt" "Slice" "SliceType" "Start" "Statement" "StatementList" "StructType" "SwitchStmt" "Tag" "TopLevelDecl" "Type" "TypeAssertion" "TypeCaseClause" "TypeDecl" "TypeList" "TypeLit" "TypeName" "TypeSpec" "TypeSwitchCase" "TypeSwitchGuard" "TypeSwitchStmt" "UnaryExpr" "Value" "VarDecl" "VarSpec"]
Ranges ["0" … "7" "0" … "9" "1" … "9" "A" … "F" "a" … "f"]
Tokens ["assign_op" "binary_op" "float_lit" "identifier" "imaginary_lit" "int_lit" "rune_lit" "string_lit" "unary_op"]
