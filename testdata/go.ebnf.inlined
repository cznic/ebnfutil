add_op = "+"
	| "-"
	| "|"
	| "^" .
assign_op = [ add_op | mul_op ] "=" .
big_u_value = "\\" "U" hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit .
binary_op = "||"
	| "&&"
	| rel_op
	| add_op
	| mul_op .
byte_value = octal_byte_value | hex_byte_value .
decimal_digit = "0" … "9" .
decimal_lit = "1" … "9" { decimal_digit } .
decimals = decimal_digit { decimal_digit } .
escaped_char = "\\" (
		  "a"
		| "b"
		| "f"
		| "n"
		| "r"
		| "t"
		| "v"
		| "\\"
		| "'"
		| "\""
	  ) .
exponent = ( "e" | "E" ) [ "+" | "-" ] decimals .
float_lit = decimals "." [ decimals ] [ exponent ]
	| decimals exponent
	| "." decimals [ exponent ] .
hex_byte_value = "\\" "x" hex_digit hex_digit .
hex_digit = "0" … "9"
	| "A" … "F"
	| "a" … "f" .
hex_lit = "0" ( "x" | "X" ) hex_digit { hex_digit } .
identifier = letter { letter | unicode_digit } .
imaginary_lit = ( decimals | float_lit ) "i" .
int_lit = decimal_lit
	| octal_lit
	| hex_lit .
interpreted_string_lit = "\"" { unicode_value | byte_value } "\"" .
letter = unicode_letter | "_" .
little_u_value = "\\" "u" hex_digit hex_digit hex_digit hex_digit .
mul_op = "*"
	| "/"
	| "%"
	| "<<"
	| ">>"
	| "&"
	| "&^" .
newline = .
octal_byte_value = "\\" octal_digit octal_digit octal_digit .
octal_digit = "0" … "7" .
octal_lit = "0" { octal_digit } .
raw_string_lit = "`" { unicode_char | newline } "`" .
rel_op = "=="
	| "!="
	| "<"
	| "<="
	| ">"
	| ">=" .
rune_lit = "'" ( unicode_value | byte_value ) "'" .
string_lit = raw_string_lit | interpreted_string_lit .
unary_op = "+"
	| "-"
	| "!"
	| "^"
	| "*"
	| "&"
	| "<-" .
unicode_char = .
unicode_digit = .
unicode_letter = .
unicode_value = unicode_char
	| little_u_value
	| big_u_value
	| escaped_char .

Expression = UnaryExpr
	| Expression binary_op UnaryExpr .
IfStmt = "if" [
		 (
			 
			| Expression
			| Expression "<-" Expression
			| Expression ( "++" | "--" )
			| Expression { "," Expression } assign_op Expression { "," Expression }
			| identifier { "," identifier } ":=" Expression { "," Expression }
		  ) ";"
	  ] Expression "{" { Statement ";" } "}" [
		 "else" (
			  IfStmt
			| "{" { Statement ";" } "}"
		  )
	  ] .
PrimaryExpr = int_lit
	| float_lit
	| imaginary_lit
	| rune_lit
	| string_lit
	| (
		  "struct" "{" {
			 (
				  identifier { "," identifier } Type
				| [ "*" ] (
					  identifier
					| identifier "." identifier
				  )
			  ) [ string_lit ] ";"
		  } "}"
		| "[" Expression "]" Type
		| "[" "..." "]" Type
		| "[" "]" Type
		| "map" "[" Type "]" Type
		| identifier
		| identifier "." identifier
	  ) "{" [
		 [
			 ( identifier | Expression ) ":"
		  ] Value {
			 "," [
				 ( identifier | Expression ) ":"
			  ] Value
		  } [ "," ]
	  ] "}"
	| "func" "(" [
		 [
			 identifier { "," identifier }
		  ] [ "..." ] Type {
			 "," [
				 identifier { "," identifier }
			  ] [ "..." ] Type
		  } [ "," ]
	  ] ")" [
		  "(" [
			 [
				 identifier { "," identifier }
			  ] [ "..." ] Type {
				 "," [
					 identifier { "," identifier }
				  ] [ "..." ] Type
			  } [ "," ]
		  ] ")"
		| Type
	  ] "{" { Statement ";" } "}"
	| identifier
	| identifier "." identifier
	| ReceiverType "." identifier
	| "(" Expression ")"
	| Type "(" Expression [ "," ] ")"
	| identifier "(" [
		 (
			  Type [
				 "," Expression { "," Expression } [ "..." ]
			  ]
			| Expression { "," Expression } [ "..." ]
		  ) [ "," ]
	  ] ")"
	| PrimaryExpr "." identifier
	| PrimaryExpr "[" Expression "]"
	| PrimaryExpr "[" [ Expression ] ":" [ Expression ] "]"
	| PrimaryExpr "." "(" Type ")"
	| PrimaryExpr "(" [
		 Expression { "," Expression } [ "..." ] [ "," ]
	  ] ")" .
ReceiverType = identifier
	| identifier "." identifier
	| "(" "*" (
		  identifier
		| identifier "." identifier
	  ) ")"
	| "(" ReceiverType ")" .
Start = "package" identifier ";" {
		 "import" (
			  [ "." | identifier ] string_lit
			| "(" {
				 [ "." | identifier ] string_lit ";"
			  } ")"
		  ) ";"
	  } {
		 (
			  "const" (
				  identifier { "," identifier } [
					 [ Type ] "=" Expression { "," Expression }
				  ]
				| "(" {
					 identifier { "," identifier } [
						 [ Type ] "=" Expression { "," Expression }
					  ] ";"
				  } ")"
			  )
			| "type" (
				  identifier Type
				| "(" {
					 identifier Type ";"
				  } ")"
			  )
			| "var" (
				  identifier { "," identifier } (
					  Type [
						 "=" Expression { "," Expression }
					  ]
					| "=" Expression { "," Expression }
				  )
				| "(" {
					 identifier { "," identifier } (
						  Type [
							 "=" Expression { "," Expression }
						  ]
						| "=" Expression { "," Expression }
					  ) ";"
				  } ")"
			  )
			| "func" identifier (
				  "(" [
					 [
						 identifier { "," identifier }
					  ] [ "..." ] Type {
						 "," [
							 identifier { "," identifier }
						  ] [ "..." ] Type
					  } [ "," ]
				  ] ")" [
					  "(" [
						 [
							 identifier { "," identifier }
						  ] [ "..." ] Type {
							 "," [
								 identifier { "," identifier }
							  ] [ "..." ] Type
						  } [ "," ]
					  ] ")"
					| Type
				  ] "{" { Statement ";" } "}"
				| "(" [
					 [
						 identifier { "," identifier }
					  ] [ "..." ] Type {
						 "," [
							 identifier { "," identifier }
						  ] [ "..." ] Type
					  } [ "," ]
				  ] ")" [
					  "(" [
						 [
							 identifier { "," identifier }
						  ] [ "..." ] Type {
							 "," [
								 identifier { "," identifier }
							  ] [ "..." ] Type
						  } [ "," ]
					  ] ")"
					| Type
				  ]
			  )
			| "func" "(" [ identifier ] [ "*" ] identifier ")" identifier (
				  "(" [
					 [
						 identifier { "," identifier }
					  ] [ "..." ] Type {
						 "," [
							 identifier { "," identifier }
						  ] [ "..." ] Type
					  } [ "," ]
				  ] ")" [
					  "(" [
						 [
							 identifier { "," identifier }
						  ] [ "..." ] Type {
							 "," [
								 identifier { "," identifier }
							  ] [ "..." ] Type
						  } [ "," ]
					  ] ")"
					| Type
				  ] "{" { Statement ";" } "}"
				| "(" [
					 [
						 identifier { "," identifier }
					  ] [ "..." ] Type {
						 "," [
							 identifier { "," identifier }
						  ] [ "..." ] Type
					  } [ "," ]
				  ] ")" [
					  "(" [
						 [
							 identifier { "," identifier }
						  ] [ "..." ] Type {
							 "," [
								 identifier { "," identifier }
							  ] [ "..." ] Type
						  } [ "," ]
					  ] ")"
					| Type
				  ]
			  )
		  ) ";"
	  } .
Statement = "const" (
		  identifier { "," identifier } [
			 [ Type ] "=" Expression { "," Expression }
		  ]
		| "(" {
			 identifier { "," identifier } [
				 [ Type ] "=" Expression { "," Expression }
			  ] ";"
		  } ")"
	  )
	| "type" (
		  identifier Type
		| "(" {
			 identifier Type ";"
		  } ")"
	  )
	| "var" (
		  identifier { "," identifier } (
			  Type [
				 "=" Expression { "," Expression }
			  ]
			| "=" Expression { "," Expression }
		  )
		| "(" {
			 identifier { "," identifier } (
				  Type [
					 "=" Expression { "," Expression }
				  ]
				| "=" Expression { "," Expression }
			  ) ";"
		  } ")"
	  )
	| identifier ":" Statement
	|
	| Expression
	| Expression "<-" Expression
	| Expression ( "++" | "--" )
	| Expression { "," Expression } assign_op Expression { "," Expression }
	| identifier { "," identifier } ":=" Expression { "," Expression }
	| "go" Expression
	| "return" [
		 Expression { "," Expression }
	  ]
	| "break" [ identifier ]
	| "continue" [ identifier ]
	| "goto" identifier
	| "fallthrough"
	| "{" { Statement ";" } "}"
	| IfStmt
	| "switch" [
		 (
			 
			| Expression
			| Expression "<-" Expression
			| Expression ( "++" | "--" )
			| Expression { "," Expression } assign_op Expression { "," Expression }
			| identifier { "," identifier } ":=" Expression { "," Expression }
		  ) ";"
	  ] [ Expression ] "{" {
		 (
			  "case" Expression { "," Expression }
			| "default"
		  ) ":" { Statement ";" }
	  } "}"
	| "switch" [
		 (
			 
			| Expression
			| Expression "<-" Expression
			| Expression ( "++" | "--" )
			| Expression { "," Expression } assign_op Expression { "," Expression }
			| identifier { "," identifier } ":=" Expression { "," Expression }
		  ) ";"
	  ] [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" "{" {
		 (
			  "case" Type { "," Type }
			| "default"
		  ) ":" { Statement ";" }
	  } "}"
	| "select" "{" {
		 (
			  "case" (
				  Expression "<-" Expression
				| [
					  Expression { "," Expression } "="
					| identifier { "," identifier } ":="
				  ] Expression
			  )
			| "default"
		  ) ":" { Statement ";" }
	  } "}"
	| "for" [
		  Expression
		| [
			 
			| Expression
			| Expression "<-" Expression
			| Expression ( "++" | "--" )
			| Expression { "," Expression } assign_op Expression { "," Expression }
			| identifier { "," identifier } ":=" Expression { "," Expression }
		  ] ";" [ Expression ] ";" [
			 
			| Expression
			| Expression "<-" Expression
			| Expression ( "++" | "--" )
			| Expression { "," Expression } assign_op Expression { "," Expression }
			| identifier { "," identifier } ":=" Expression { "," Expression }
		  ]
		| (
			  Expression { "," Expression } "="
			| identifier { "," identifier } ":="
		  ) "range" Expression
	  ] "{" { Statement ";" } "}"
	| "defer" Expression .
Type = identifier
	| identifier "." identifier
	| "[" Expression "]" Type
	| "struct" "{" {
		 (
			  identifier { "," identifier } Type
			| [ "*" ] (
				  identifier
				| identifier "." identifier
			  )
		  ) [ string_lit ] ";"
	  } "}"
	| "*" Type
	| "func" "(" [
		 [
			 identifier { "," identifier }
		  ] [ "..." ] Type {
			 "," [
				 identifier { "," identifier }
			  ] [ "..." ] Type
		  } [ "," ]
	  ] ")" [
		  "(" [
			 [
				 identifier { "," identifier }
			  ] [ "..." ] Type {
				 "," [
					 identifier { "," identifier }
				  ] [ "..." ] Type
			  } [ "," ]
		  ] ")"
		| Type
	  ]
	| "interface" "{" {
		 (
			  identifier "(" [
				 [
					 identifier { "," identifier }
				  ] [ "..." ] Type {
					 "," [
						 identifier { "," identifier }
					  ] [ "..." ] Type
				  } [ "," ]
			  ] ")" [
				  "(" [
					 [
						 identifier { "," identifier }
					  ] [ "..." ] Type {
						 "," [
							 identifier { "," identifier }
						  ] [ "..." ] Type
					  } [ "," ]
				  ] ")"
				| Type
			  ]
			| identifier
			| identifier "." identifier
		  ) ";"
	  } "}"
	| "[" "]" Type
	| "map" "[" Type "]" Type
	| (
		  "chan" [ "<-" ]
		| "<-" "chan"
	  ) Type
	| "(" Type ")" .
UnaryExpr = PrimaryExpr
	| unary_op UnaryExpr .
Value = Expression
	| "{" [
		 [
			 ( identifier | Expression ) ":"
		  ] Value {
			 "," [
				 ( identifier | Expression ) ":"
			  ] Value
		  } [ "," ]
	  ] "}" .
